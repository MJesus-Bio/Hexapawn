# -*- coding: utf-8 -*-
"""Hexapawn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K_H-CHAn60Dvba53sA-rM84Q6LFtkc2y
"""

# !pip install colorama

"""Tablero"""

from colorama import Back, Fore, Style

def show_board(board, claves):
  a3 = board[0]
  b3 = board[1]
  c3 = board[2]
  a2 = board[3]
  b2 = board[4]
  c2 = board[5]
  a1 = board[6]
  b1 = board[7]
  c1 = board[8]
  row_3 = '3 ' + f'{Back.BLUE}' + claves[a3] + f'{Back.CYAN}'\
          + claves[b3] + f'{Back.BLUE}' + claves[c3] + f'{Style.RESET_ALL}'
  row_2 = '2 ' + f'{Back.CYAN}' + claves[a2] + f'{Back.BLUE}'\
          + claves[b2] + f'{Back.CYAN}' + claves[c2] + f'{Style.RESET_ALL}'
  row_1 = '1 ' + f'{Back.BLUE}' + claves[a1] + f'{Back.CYAN}'\
          + claves[b1] + f'{Back.BLUE}' + claves[c1] + f'{Style.RESET_ALL}'
  print(row_3 + '\n' + row_2 + '\n' + row_1 + '\n')

"""Chequeo movimiento"""

def can_move_white(board, piece):
  move = True
  pawn = board.find(piece)
  if pawn in (0, 1, 2):
    move = False
  elif board[pawn - 3] != '0':
    move = False
  return move

def can_move_black(board, piece):
  move = True
  pawn = board.find(piece)
  if pawn in (6, 7, 8):
    move = False
  elif board[pawn + 3] != '0':
    move = False
  return move

"""Movimiento"""

def move_white(board, piece):
  pawn = board.find(piece)
  new_board = board.replace(piece, '0')
  new_board = new_board[:pawn - 3] + piece + new_board[pawn - 2:]
  return new_board

def move_black(board, piece):
  pawn = board.find(piece)
  new_board = board.replace(piece, '0')
  new_board = new_board[:pawn + 3] + piece + new_board[pawn + 4:]
  return new_board

"""Chequeo captura"""

def can_capture_white_left(board, piece):
  move = True
  pawn = board.find(piece)
  if pawn in (0, 3, 6):
    move = False
  elif board[pawn - 4] not in 'abc':
    move = False
  return move

def can_capture_white_right(board, piece):
  move = True
  pawn = board.find(piece)
  if pawn in (2, 5, 8):
    move = False
  elif board[pawn - 2] not in 'abc':
    move = False
  return move

def can_capture_black_left(board, piece):
  move = True
  pawn = board.find(piece)
  if pawn in (2, 5, 8):
    move = False
  elif board[pawn + 4] not in 'def':
    move = False
  return move

def can_capture_black_right(board, piece):
  move = True
  pawn = board.find(piece)
  if pawn in (0, 3, 6):
    move = False
  elif board[pawn + 2] not in 'def':
    move = False
  return move

"""Captura"""

def capture_white_left(board, piece):
  pawn = board.find(piece)
  new_board = board.replace(piece, '0')
  new_board = new_board[:pawn - 4] + piece + new_board[pawn - 3:]
  return new_board

def capture_white_right(board, piece):
  pawn = board.find(piece)
  new_board = board.replace(piece, '0')
  new_board = new_board[:pawn - 2] + piece + new_board[pawn - 1:]
  return new_board

def capture_black_left(board, piece):
  pawn = board.find(piece)
  new_board = board.replace(piece, '0')
  new_board = new_board[:pawn + 4] + piece + new_board[pawn + 5:]
  return new_board

def capture_black_right(board, piece):
  pawn = board.find(piece)
  new_board = board.replace(piece, '0')
  new_board = new_board[:pawn + 2] + piece + new_board[pawn + 3:]
  return new_board

"""Movimientos legales"""

def get_legal_moves_white(board, pieces):
  moves = []
  for piece in pieces:
    if can_move_white(board, piece):
      moves.append(move_white(board, piece))
    if can_capture_white_left(board, piece):
      moves.append(capture_white_left(board, piece))
    if can_capture_white_right(board, piece):
      moves.append(capture_white_right(board, piece))
  return moves

def get_legal_moves_black(board, pieces):
  moves = []
  for piece in pieces:
    if can_move_black(board, piece):
      moves.append(move_black(board, piece))
    if can_capture_black_left(board, piece):
      moves.append(capture_black_left(board, piece))
    if can_capture_black_right(board, piece):
      moves.append(capture_black_right(board, piece))
  return moves

"""Victoria"""

def black_wins(board, white_pieces, black_pieces):
  wins = False
  for piece in black_pieces:
    if piece in board[6:9]:
      wins = True
  if not white_pieces:
    wins = True
  if not get_legal_moves_white(board, white_pieces):
    wins = True
  return wins

def white_wins(board, white_pieces, black_pieces):
  wins = False
  for piece in white_pieces:
    if piece in board[0:3]:
      wins = True
  if not black_pieces:
    wins = True
  if not get_legal_moves_black(board, black_pieces):
    wins = True
  return wins

def who_wins(board, white_pieces, black_pieces, turn):
  winner = False
  if turn == 'Black':
    if black_wins(board, white_pieces, black_pieces):
      winner = 'Black'
    elif white_wins(board, white_pieces, black_pieces):
      winner = 'White'
  elif turn == 'White':
    if white_wins(board, white_pieces, black_pieces):
      winner = 'White'
    elif black_wins(board, white_pieces, black_pieces):
      winner = 'Black'
  return winner

"""Piezas capturadas"""

def get_pieces(board):
  white_pieces = 'def'
  black_pieces = 'abc'
  for piece in white_pieces:
    if piece not in board:
      white_pieces = white_pieces.replace(piece, '')
  for piece in black_pieces:
    if piece not in board:
      black_pieces = black_pieces.replace(piece, '')
  return (white_pieces, black_pieces)

"""Definiciones"""

start_board = 'abc000def'
white_pawn = ' \u2659 '
black_pawn = ' \u265F '
claves = {'a': f'{Fore.BLACK}' + black_pawn, 'b': f'{Fore.BLACK}' + black_pawn,
          'c': f'{Fore.BLACK}' + black_pawn, 'd': f'{Fore.WHITE}' + white_pawn,
          'e': f'{Fore.WHITE}' + white_pawn, 'f': f'{Fore.WHITE}' + white_pawn,
          '0': '   '}

white_pieces = 'def'
black_pieces = 'abc'

"""Loop"""

import random

winner = False
board = start_board
white_pieces = 'def'
black_pieces = 'abc'

show_board(board, claves)

while not winner:
  turn = 'White'
  white_moves = get_legal_moves_white(board, white_pieces)
  random.shuffle(white_moves)
  board = white_moves[0]
  white_pieces, black_pieces = get_pieces(board)
  show_board(board, claves)
  winner = who_wins(board, white_pieces, black_pieces, turn)
  if winner:
    print(winner, 'Wins!')
    break
  turn = 'Black'
  black_moves = get_legal_moves_black(board, black_pieces)
  random.shuffle(black_moves)
  board = black_moves[0]
  white_pieces, black_pieces = get_pieces(board)
  show_board(board, claves)
  winner = who_wins(board, white_pieces, black_pieces, turn)
  if winner:
    print(winner, 'Wins!')
    break